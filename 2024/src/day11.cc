#include <catch2/catch_test_macros.hpp>
#include <read_file.h>
#include <utils.h>
#include <fmt/format.h>
#include <fmt/ranges.h>
#include <ctre.hpp>
#include <iostream>
#include <vector>
#include <utility>
#include <functional>
#include <map>
#include <fmt/ostream.h>
#include <set>
#include <point.h>
#include <variant>

#include <day11/example.h>
#include <day11/input.h>

bool has_even_digit_count(uint64_t i)
{
	if(i < 10)
		return false;
	if(i < 100)
		return true;
	if(i < 1000)
		return false;
	if(i < 10000)
		return true;
	if(i < 100000)
		return false;
	if(i < 1000000)
		return true;
	if(i < 10000000)
		return false;
	if(i < 100000000)
		return true;
	if(i < 1000000000)
		return false;
	if(i < 10000000000)
		return true;
	if(i < 100000000000)
		return false;
	if(i < 1000000000000)
		return true;
	if(i < 10000000000000)
		return false;
	if(i < 100000000000000)
		return true;
	if(i < 1000000000000000)
		return false;
	if(i < 10000000000000000)
		return true;
	if(i < 100000000000000000)
		return false;
	if(i < 1000000000000000000)
		return true;
	if(i < 10000000000000000000ULL)
		return false;

	return true;
}

int digit_count(uint64_t i)
{
	if(i < 10)
		return 1;
	if(i < 100)
		return 2;
	if(i < 1000)
		return 3;
	if(i < 10000)
		return 4;
	if(i < 100000)
		return 5;
	if(i < 1000000)
		return 6;
	if(i < 10000000)
		return 7;
	if(i < 100000000)
		return 8;
	if(i < 1000000000)
		return 9;
	if(i < 10000000000)
		return 10;
	if(i < 100000000000)
		return 11;
	if(i < 1000000000000)
		return 12;
	if(i < 10000000000000)
		return 13;
	if(i < 100000000000000)
		return 14;
	if(i < 1000000000000000)
		return 15;
	if(i < 10000000000000000)
		return 16;
	if(i < 100000000000000000)
		return 17;
	if(i < 1000000000000000000)
		return 18;
	if(i < 10000000000000000000ULL)
		return 19;

	return 20;
}

std::pair<uint64_t, uint64_t> split(uint64_t input)
{
	char buffer[40] = {' '};

	auto const ret = std::to_chars(buffer, buffer+sizeof(buffer), input);

	//check if to_chars failed
	if(ret.ec != std::errc())
	{
		throw std::logic_error("converion error");
	}

	auto const digit_count = ret.ptr - buffer;

	std::pair<uint64_t, uint64_t> result = {0, 0};
	auto ret1 = std::from_chars(buffer, buffer + digit_count/2, result.first);

	//check if from_chars failed
	if(ret1.ec != std::errc())
	{
		throw std::logic_error("from_chars 1 error");
	}
	if(ret1.ptr != (buffer + digit_count/2))
	{
		throw std::logic_error("from_chars 1 not all input cosumed");
	}

	auto ret2 = std::from_chars(buffer + digit_count/2, ret.ptr, result.second);

	//check if from_chars failed
	if(ret2.ec != std::errc())
	{
		throw std::logic_error("from_chars 2 error");
	}
	if(ret2.ptr != ret.ptr)
	{
		throw std::logic_error("from_chars 2 not all input cosumed");
	}
	return result;
}

namespace std
{
std::ostream& operator<<(std::ostream& out, std::pair<uint64_t, uint64_t> const& pair)
{
	return out << "{" << pair.first << ", " << pair.second << "}";
}
}

std::variant<uint64_t, std::pair<uint64_t, uint64_t>> blink(uint64_t in)
{
	if(in == 0)
		return uint64_t(1);
	if(has_even_digit_count(in))
		return split(in);

	uint64_t mul = in*2024UL;

	//check if multiplication overflows
	if (in != 0 && mul / 2024UL != in) {
		throw std::logic_error("multiplication overflow");
	}

	return mul;
}

template<class... Ts>
struct overloads : Ts... { using Ts::operator()...; };

std::vector<uint64_t> blink_all(std::vector<uint64_t> ints, std::set<std::pair<uint64_t, uint8_t>> &unique_numbers_gen, int count)
{
	std::vector<uint64_t> out;
	out.reserve(ints.size()*1.5);

	for(int i : ints)
	{
		unique_numbers_gen.insert(i, count);
		std::visit(
			overloads{
				[&out](uint64_t v){
					out.push_back(v);
				},
				[&out](std::pair<uint64_t, uint64_t> v){
					out.push_back(v.first);
					out.push_back(v.second);
				}
			},
			blink(i));
	}

	return out;
}

uint64_t count_stones(std::string_view data, int count)
{
	std::vector<uint64_t> ints;
	for_each_int(data, " "sv, [&ints](uint64_t val){ints.push_back(val);});
	fmt::println("in: {}", ints);
	std::map<uint64_t, std::map<uint8_t, size_t>> unique_numbers_gen;

	for(int i = 0; i<count; ++i)
	{
		ints = blink_all(ints, unique_numbers_gen, count);
		fmt::println("\n{}: unique_numbers[{}] {}", i+1, unique_numbers_gen.size(), unique_numbers_gen);
	}
	return ints.size();
}

TEST_CASE("has_even_digit_count")
{
	REQUIRE(has_even_digit_count(9) == false);
	REQUIRE(has_even_digit_count(99) == true);
	REQUIRE(has_even_digit_count(999) == false);
	REQUIRE(has_even_digit_count(9999) == true);
	REQUIRE(has_even_digit_count(99999) == false);
	REQUIRE(has_even_digit_count(999999) == true);
	REQUIRE(has_even_digit_count(9999999) == false);
	REQUIRE(has_even_digit_count(99999999) == true);
	REQUIRE(has_even_digit_count(999999999) == false);
	REQUIRE(has_even_digit_count(9999999999) == true);
	REQUIRE(has_even_digit_count(99999999999) == false);
	REQUIRE(has_even_digit_count(999999999999) == true);
	REQUIRE(has_even_digit_count(9999999999999) == false);
	REQUIRE(has_even_digit_count(99999999999999) == true);
	REQUIRE(has_even_digit_count(999999999999999) == false);
	REQUIRE(has_even_digit_count(9999999999999999) == true);
	REQUIRE(has_even_digit_count(99999999999999999) == false);
	REQUIRE(has_even_digit_count(999999999999999999) == true);
	REQUIRE(has_even_digit_count(9999999999999999999UL) == false);
	REQUIRE(has_even_digit_count(18446744073709551615UL) == true);
}

TEST_CASE("split")
{
	REQUIRE(split(10) == std::make_pair(1UL, 0UL));
	REQUIRE(split(99) == std::make_pair(9UL, 9UL));
	REQUIRE(split(999) == std::make_pair(9UL, 99UL));
	REQUIRE(split(9999) == std::make_pair(99UL, 99UL));
	REQUIRE(split(99999) == std::make_pair(99UL, 999UL));

	REQUIRE(split(999999) == std::make_pair(999UL, 999UL));
	REQUIRE(split(99999999) == std::make_pair(9999UL, 9999UL));
	REQUIRE(split(9999999999) == std::make_pair(99999UL, 99999UL));
	REQUIRE(split(999999999999) == std::make_pair(999999UL, 999999UL));
	REQUIRE(split(99999999999999) == std::make_pair(9999999UL, 9999999UL));
	REQUIRE(split(9999999999999999) == std::make_pair(99999999UL, 99999999UL));
	REQUIRE(split(999999999999999999) == std::make_pair(999999999UL, 999999999UL));

	REQUIRE(split(18446744073709551615ULL) == std::make_pair(1844674407UL, 3709551615UL));
}

std::string make_number_string(uint64_t i)
{
	char buffer[41] = {' '};
	auto const ret = std::to_chars(buffer, buffer+sizeof(buffer), i);

	if(ret.ec != std::errc())
	{
		throw std::logic_error("converion error");
	}

	return std::string(buffer, ret.ptr);
}

TEST_CASE("day 11")
{
	SECTION("part 1")
	{
		uint64_t number_64;
		std::string_view number_sv = "18446744073709551615"sv;
		std::from_chars(number_sv.begin(), number_sv.end(), number_64);
		REQUIRE(number_64 == 18446744073709551615UL);
		REQUIRE(digit_count(18446744073709551615UL) == 20);
		REQUIRE(make_number_string(number_64) == "18446744073709551615");

		// REQUIRE(count_stones(day11::Example::data1, 0) == 5);
		// REQUIRE(count_stones(day11::Example::data1, 1) == 7);

		// REQUIRE(count_stones(day11::Example::data2, 0) == 2);
		// REQUIRE(count_stones(day11::Example::data2, 1) == 3);
		// REQUIRE(count_stones(day11::Example::data2, 2) == 4);
		// REQUIRE(count_stones(day11::Example::data2, 3) == 5);
		// REQUIRE(count_stones(day11::Example::data2, 4) == 9);
		// REQUIRE(count_stones(day11::Example::data2, 5) == 13);
		// REQUIRE(count_stones(day11::Example::data2, 6) == 22);
		// REQUIRE(count_stones(day11::Example::data2, 25) == 55312);

		// REQUIRE(count_stones(day11::Input::data, 0) == 8);
		// REQUIRE(count_stones(day11::Input::data, 2) == 8);
		// REQUIRE(count_stones(day11::Input::data, 25) == 238240);

		// 0           => [54]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 24, 26, 28, 32, 36, 40, 48, 56, 57, 60, 67, 72, 77, 80, 84, 86, 91, 94, 96, 2024, 2048, 2457, 2608, 2867, 2880, 3277, 3686, 4048, 6032, 6072, 8096, 9184, 9456, 10120, 12144, 14168, 16192, 18216, 20482880, 24579456, 28676032, 32772608, 36869184}
		// 6           => [54]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 24, 26, 28, 32, 36, 40, 48, 56, 57, 60, 67, 72, 77, 80, 84, 86, 91, 94, 96, 2024, 2048, 2457, 2608, 2867, 2880, 3277, 3686, 4048, 6032, 6072, 8096, 9184, 9456, 10120, 12144, 14168, 16192, 18216, 20482880, 24579456, 28676032, 32772608, 36869184}
		// 60          => [54]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 24, 26, 28, 32, 36, 40, 48, 56, 57, 60, 67, 72, 77, 80, 84, 86, 91, 94, 96, 2024, 2048, 2457, 2608, 2867, 2880, 3277, 3686, 4048, 6032, 6072, 8096, 9184, 9456, 10120, 12144, 14168, 16192, 18216, 20482880, 24579456, 28676032, 32772608, 36869184}
		// 9759        => [57]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 24, 26, 28, 32, 36, 40, 48, 56, 57, 59, 60, 67, 72, 77, 80, 84, 86, 91, 94, 96, 97, 2024, 2048, 2457, 2608, 2867, 2880, 3277, 3686, 4048, 6032, 6072, 8096, 9184, 9456, 9759, 10120, 12144, 14168, 16192, 18216, 20482880, 24579456, 28676032, 32772608, 36869184}
		// 256219 .... => [358] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 55, 56, 57, 58, 60, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 94, 96, 97, 144, 219, 256, 291, 328, 443, 456, 518, 588, 632, 663, 872, 896, 922, 944, 984, 992, 1096, 1432, 1976, 2024, 2048, 2066, 2448, 2457, 2584, 2608, 2696, 2752, 2864, 2867, 2875, 2880, 3124, 3258, 3277, 3344, 3408, 3419, 3438, 3523, 3592, 3675, 3683, 3686, 3690, 3692, 3733, 3792, 3816, 3821, 3874, 3875, 3958, 3984, 3997, 4048, 4055, 4089, 4119, 4137, 4190, 4197, 4272, 4294, 4312, 4616, 4704, 4896, 5142, 5336, 5584, 5736, 5751, 5752, 5792, 6032, 6072, 6512, 6992, 7680, 7760, 7880, 8096, 8160, 8832, 8968, 9184, 9280, 9440, 9456, 9475, 9600, 10120, 10208, 12144, 13323, 14168, 14208, 15438, 16097, 16192, 16893, 16989, 17408, 18159, 18198, 18216, 18233, 18245, 18446, 18879, 19142, 19150, 19560, 19749, 20036, 20207, 20352, 20441, 20704, 20740, 21109, 21220, 21306, 25408, 26368, 28416, 40320, 46816, 51872, 56320, 56992, 62272, 67232, 68064, 71008, 74407, 75328, 79200, 79648, 85056, 92768, 96032, 256219, 291456, 443256, 518144, 588984, 663872, 896632, 922944, 1048432, 1190112, 1279168, 1341912, 1764928, 1813504, 1866128, 1910656, 1991616, 2007808, 20482880, 20660992, 24579456, 26965752, 28676032, 28756992, 31246512, 32580328, 32772608, 34191432, 34385736, 35233792, 36753816, 36832752, 36869184, 36903592, 36927880, 37334704, 38211096, 38743408, 38759600, 39589440, 39971976, 40552864, 40898968, 41192448, 41372584, 41904896, 41977760, 42724616, 42949280, 43123344, 51425792, 53368832, 57513984, 81607680, 94755584, 104988928, 113991680, 115351808, 126038528, 136077568, 137761536, 143720192, 150599768, 152463872, 160300800, 161207552, 172153344, 187762432, 194368768, 543090688, 546017280, 1332379648, 1543825408, 1609779200, 1657229312, 1689368064, 1698910208, 1740856320, 1815967232, 1819875328, 1823371008, 1824556992, 1844674407, 1887951872, 1914285056, 1915062272, 1956028416, 1974946816, 2003620352, 2020796032, 2044192768, 2074040320, 2110920704, 2122026368, 2130614208, 18446744071609779200, 18446744071657229312, 18446744071689368064, 18446744071740856320, 18446744071815967232, 18446744071819875328, 18446744071823371008, 18446744071824556992, 18446744071887951872, 18446744071914285056, 18446744071915062272, 18446744071956028416, 18446744071974946816, 18446744072003620352, 18446744072020796032, 18446744072110920704, 18446744072130614208, 18446744072195194880, 18446744072242644992, 18446744072274783744, 18446744072401382912, 18446744072405291008, 18446744072409972672, 18446744072473367552, 18446744072499700736, 18446744072500477952, 18446744072541444096, 18446744072606211712, 18446744072696336384, 18446744072780610560, 18446744072828060672, 18446744072860199424, 18446744072892972032, 18446744072986798592, 18446744072990706688, 18446744072995388352, 18446744073058783232, 18446744073085116416, 18446744073191627392, 18446744073281752064, 18446744073366026240, 18446744073413476352, 18446744073445615104, 18446744073478387712, 18446744073576122368, 18446744073580804032}
		// 1175776     => [113] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 20, 24, 26, 28, 29, 31, 32, 33, 35, 36, 37, 40, 42, 47, 48, 51, 56, 57, 60, 65, 66, 67, 72, 77, 78, 80, 84, 86, 91, 92, 94, 96, 2024, 2048, 2457, 2608, 2867, 2880, 3124, 3277, 3328, 3529, 3631, 3686, 3692, 3733, 4048, 4272, 4704, 5142, 5792, 6032, 6072, 6512, 6536, 6632, 7880, 8096, 9184, 9456, 10120, 12144, 14168, 15438, 16192, 17439, 17943, 18216, 18245, 18446, 25408, 54944, 56992, 72352, 74407, 1175776, 20482880, 24579456, 28676032, 31246512, 32772608, 35296536, 36316632, 36869184, 36927880, 37334704, 42723328, 51425792, 111206656, 115351808, 146440448, 150599768, 1543825408, 1743972352, 1794354944, 1824556992, 1844674407, 18446744071794354944, 18446744071824556992, 18446744072409972672, 18446744072995388352, 18446744073580804032}
		// 113         => [238] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 16, 17, 20, 21, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 51, 52, 54, 56, 57, 59, 60, 62, 64, 65, 67, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 84, 86, 88, 91, 92, 94, 95, 96, 113, 228, 328, 461, 472, 663, 712, 872, 933, 955, 1728, 1792, 2024, 2048, 2160, 2425, 2457, 2608, 2867, 2875, 2880, 3102, 3124, 3178, 3277, 3344, 3354, 3440, 3470, 3533, 3675, 3686, 3692, 3733, 3816, 3872, 3908, 4048, 4176, 4181, 4312, 4352, 4704, 5142, 5792, 5932, 6032, 6072, 6224, 6512, 6920, 6992, 7016, 7488, 7640, 7880, 8096, 8672, 9184, 9456, 9576, 10120, 10674, 11985, 12144, 14168, 14208, 15328, 15438, 15705, 16192, 16572, 17149, 17459, 18159, 18216, 18245, 18446, 19310, 20658, 21306, 25408, 29312, 30752, 42848, 52416, 56992, 58368, 67232, 67360, 67392, 74407, 228712, 461472, 663872, 933064, 955328, 1341912, 1441088, 1764928, 1888392, 1932920, 20482880, 21604176, 24257640, 24579456, 28676032, 28756992, 31023872, 31246512, 31786920, 32772608, 33541728, 34709576, 35337016, 36753816, 36869184, 36927880, 37334704, 39083440, 41811792, 43123344, 51425792, 59327488, 62242048, 86724352, 106089984, 115351808, 118136832, 136077568, 136336640, 136401408, 150599768, 543090688, 1067452416, 1198542848, 1543825408, 1570567360, 1657229312, 1714915328, 1745930752, 1815967232, 1824556992, 1844674407, 1931067392, 2065858368, 2130614208, 18446744071570567360, 18446744071657229312, 18446744071714915328, 18446744071745930752, 18446744071815967232, 18446744071824556992, 18446744071931067392, 18446744072065858368, 18446744072130614208, 18446744072155983040, 18446744072242644992, 18446744072300331008, 18446744072331346432, 18446744072401382912, 18446744072409972672, 18446744072516483072, 18446744072651274048, 18446744072741398720, 18446744072828060672, 18446744072986798592, 18446744072995388352, 18446744073101898752, 18446744073236689728, 18446744073326814400, 18446744073413476352, 18446744073580804032, 18446744073687314432}
		// 92833       => [102] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 20, 24, 26, 28, 31, 32, 33, 35, 36, 37, 40, 42, 47, 48, 51, 56, 57, 60, 65, 67, 72, 76, 77, 78, 80, 84, 86, 91, 92, 94, 96, 2024, 2048, 2080, 2457, 2608, 2867, 2880, 3124, 3277, 3551, 3686, 3692, 3733, 4048, 4704, 5142, 5792, 6032, 6072, 6512, 7880, 8096, 9176, 9184, 9456, 10120, 12144, 14168, 15438, 16192, 17549, 18216, 18245, 18446, 25408, 56992, 74407, 92833, 20482880, 24579456, 28676032, 31246512, 32772608, 35519176, 36869184, 36927880, 37334704, 51425792, 115351808, 150599768, 187893992, 1543825408, 1754902080, 1824556992, 1844674407, 18446744071754902080, 18446744071824556992, 18446744072409972672, 18446744072995388352, 18446744073580804032
		REQUIRE(count_stones("256219"sv, 40) == 0);
	}

	SECTION("part 2")
	{
	}
}

